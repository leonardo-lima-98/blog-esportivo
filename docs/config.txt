
üü¢ 1. Configurando o Front-end (Next.js + Material-UI + Zustand)
1.1 Criar o projeto Next.js

npx create-next-app@latest frontend --typescript
Isso cria um projeto Next.js com suporte a TypeScript.

1.2 Entrar no diret√≥rio do projeto

cd frontend
1.3 Instalar as depend√™ncias

npm install @mui/material @emotion/react @emotion/styled zustand axios
Explica√ß√£o:

@mui/material: Biblioteca Material-UI para UI.
@emotion/react e @emotion/styled: Depend√™ncias do Material-UI.
zustand: Gerenciamento de estado leve.
axios: Para fazer requisi√ß√µes HTTP.
1.4 Rodar o projeto

npm run dev
O Next.js rodar√° localmente em http://localhost:3000.

üîµ 2. Configurando o Back-end (FastAPI + PostgreSQL)
2.1 Criar o diret√≥rio do back-end

mkdir backend && cd backend
2.2 Criar um ambiente virtual (opcional, mas recomendado)

python -m venv venv
source venv/bin/activate  # Linux/Mac
venv\Scripts\activate  # Windows
2.3 Instalar FastAPI e depend√™ncias

pip install fastapi[all] sqlalchemy psycopg2 alembic pydantic
Explica√ß√£o:

fastapi[all]: Instala FastAPI com suporte a Swagger.
sqlalchemy: ORM para PostgreSQL.
psycopg2: Driver do PostgreSQL.
alembic: Para migra√ß√£o do banco de dados.
pydantic: Para valida√ß√£o de dados.
2.4 Criar o banco de dados (PostgreSQL)
Certifique-se de que o PostgreSQL est√° rodando e crie o banco de dados:


psql -U seu_usuario -d postgres
CREATE DATABASE blog_db;
Se necess√°rio, substitua seu_usuario pelo seu usu√°rio PostgreSQL.

2.5 Rodar a API

uvicorn app.main:app --reload
A API estar√° dispon√≠vel em http://localhost:8000.

üìå Conectando Front-end e Back-end
No Next.js, edite o arquivo src/utils/api.ts (crie se n√£o existir) para configurar as chamadas de API:

typescript

import axios from "axios";

const api = axios.create({
    baseURL: "http://localhost:8000",
});

export default api;
Agora o Next.js pode consumir a API FastAPI.